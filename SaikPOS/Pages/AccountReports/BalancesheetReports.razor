@page "/account/balancesheet"
@using System.Data
@inject IInventoryReport report
@inject ICompany icompany
@inject IFinancialYear _year
@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar
<div class="content">
                <ol class="breadcrumb">
                <li><a href="#"><i class="pe-7s-home"></i> Home</a></li>
                <li><a href="/">account</a></li>
                <li class="active">BalanceSheet</li>
            </ol>
            
                    <!-- load messages -->
                                        <div class="se-pre-con" style="display: none;"></div>
                    <!-- load custom page -->
                    
<div class="row">
    <div class="col-sm-12 col-md-12">
        <div class="panel panel-bd lobidrag">
            
            <div class="panel-body">
                <div class="row" id="">
                    <div class="col-sm-6">
     
                        <div class="form-group row">
                            <label for="date" class="col-sm-4 col-form-label">From Date<span class="text-danger">*</span></label>
                            <div class="col-sm-8">
                                <input type="date" class="form-control datepicker hasDatepicker" @bind="FromDate">
                       
                            </div>
                        </div>

                        <div class="form-group row">
                            <label for="date" class="col-sm-4 col-form-label">To Date<span class="text-danger">*</span></label>
                            <div class="col-sm-8">
                                <input type="date" class="form-control datepicker hasDatepicker" @bind="ToDate">
                            </div>
                        </div>

                        <div class="form-group text-right">
                           <button type="button" class="btn btn-success" @onclick="Search">Search</button>
                        <a class="btn btn-warning" onclick="printDiv('PrintDiv')">Print</a>
                        </div>
                    </div>
                </div>
                </div>
        </div>
    </div>
</div>
<div class="row">
            <div class="col-sm-12">
                <div class="panel panel-bd lobidrag">
                    <div class="panel-heading">
                        <div class="panel-title">
                            <span>BalanceSheet</span>
                        </div>
                    </div>
                    <div class="panel-body">
                        <div id="PrintDiv" class="table-responsive ">
                            <div class="paddin5ps">
                                      <table class="print-table" width="100%">
                
                <tbody><tr>
                    <td align="left" class="print-table-tr">
                        <img src="@convertImageToDisplay(company.LogoPath)" class="companyimg" />
                    </td>
                    <td align="center" class="print-cominfo">
                        <span class="company-txt">
                            @company.CompanyName                  
                        </span><br>
                        @company.Address                        <br>
                         @company.Phone
                    </td>
                   
                     <td align="right" class="print-table-tr">
                        <date>
                        @DateTime.Now
                    </date>
                    </td>
                </tr>            
                                   
                                </tbody></table>
                            </div>

                            <div class="table-responsive paddin5ps">
                                @((MarkupString)myMarkup)
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
                </div>

@code {
    DateTime FromDate = DateTime.Now;
    DateTime ToDate = DateTime.Now;
        int inCurrenRowIndex = 0;
    int inCurentcolIndex = 0;
    decimal decPrintOrNot = 0;
    decimal decPrintOrNot1 = 0;
    string calculationMethod = string.Empty;
    Company company = new Company();
    FinancialYear year = new FinancialYear();
    string myMarkup;
    protected async override void OnInitialized()
    {
        company = icompany.Edit(1);
        year = _year.Edit(company.FinancialYearId);

    }
    protected void Search()
    {
        string calculationMethod = "FIFO";
        DataSet DsetBalanceSheet = new DataSet();
        DataTable dtbl = new DataTable();
        DsetBalanceSheet = report.BalanceSheet(ToDate, 1);


        //------------------- Asset -------------------------------//
        dtbl = DsetBalanceSheet.Tables[0];
        string values = @"<table class='table-responsive' id='tbldemo'>

                  <tr>
                  <th></th>
                  <th></th>
                  <th></th>
                  <th></th>
                  </tr>";
        values += @"<tr>
<th>" + "Assets" + @"</td>
<th>" + "Amount" + @"</td>
<th>" + "Liabilities" + @"</td>
<th>" + "Amount" + @"</td>
            </tr>";
        foreach (DataRow rw in dtbl.Rows)
        {
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + rw["Name"].ToString() + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + rw["Balance"].ToString() + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
            </tr>";
        }
        decimal dcTotalAsset = 0;
        if (dtbl.Rows.Count > 0)
        {
            dcTotalAsset = decimal.Parse(dtbl.Compute("Sum(Balance)", string.Empty).ToString());
        }
        //------------------------ Liability ---------------------//
        dtbl = new DataTable();
        dtbl = DsetBalanceSheet.Tables[1];
        int index = 0;
        foreach (DataRow rw in dtbl.Rows)
        {
            if (index < dtbl.Rows.Count)
            {
                values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + rw["Name"].ToString() + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + rw["Balance"].ToString() + @"</td>
            </tr>";
            }
            else
            {
                values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + rw["Name"].ToString() + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + rw["Balance"].ToString() + @"</td>
            </tr>";
            }
            index++;
        }
        decimal dcTotalLiability = 0;
        if (dtbl.Rows.Count > 0)
        {
            dcTotalLiability = decimal.Parse(dtbl.Compute("Sum(Balance)", string.Empty).ToString());
        }
        decimal dcClosingStock = 0;
        dcClosingStock = report.StockValueGetOnDate(Convert.ToDateTime(ToDate), calculationMethod, false, false);
        dcClosingStock = Math.Round(dcClosingStock, 2);
        //---------------------Opening Stock---------------------------------------------------------------------------------------------------------------
        decimal dcOpeninggStock = 0;
        dcOpeninggStock = report.StockValueGetOnDate(year.FromDate, calculationMethod, true, true);
        decimal dcProfit = 0;
        DataSet dsetProfitAndLoss = new DataSet();
        dsetProfitAndLoss = report.ProfitAndLossAnalysisUpToaDateForBalansheet(FromDate, FromDate, 1);
        DataTable dtblProfit = new DataTable();
        dtblProfit = dsetProfitAndLoss.Tables[0];
        for (int i = 0; i < dsetProfitAndLoss.Tables.Count; ++i)
        {
            dtbl = dsetProfitAndLoss.Tables[i];
            decimal dcSum = 0;
            if (i == 0 || (i % 2) == 0)
            {
                if (dtbl.Rows.Count > 0)
                {
                    dcSum = decimal.Parse(dtbl.Compute("Sum(Debit)", string.Empty).ToString());
                    dcProfit = dcProfit - dcSum;
                }
            }
            else
            {
                if (dtbl.Rows.Count > 0)
                {
                    dcSum = decimal.Parse(dtbl.Compute("Sum(Credit)", string.Empty).ToString());
                    dcProfit = dcProfit + dcSum;
                }
            }
        }
        decimal decCurrentProfitLoss = 0;
        decCurrentProfitLoss = dcProfit + (dcClosingStock - dcOpeninggStock);
        decimal dcProfitOpening = 0;
        DataSet dsetProfitAndLossOpening = new DataSet();
        dsetProfitAndLossOpening = report.ProfitAndLossAnalysisUpToaDateForPreviousYears(FromDate, 1);
        DataTable dtblProfitOpening = new DataTable();
        dtblProfitOpening = dsetProfitAndLossOpening.Tables[0];
        for (int i = 0; i < dsetProfitAndLossOpening.Tables.Count; ++i)
        {
            dtbl = dsetProfitAndLossOpening.Tables[i];
            decimal dcSum = 0;
            if (i == 0 || (i % 2) == 0)
            {
                if (dtbl.Rows.Count > 0)
                {
                    dcSum = decimal.Parse(dtbl.Compute("Sum(Debit)", string.Empty).ToString());
                    dcProfitOpening = dcProfitOpening - dcSum;
                }
            }
            else
            {
                if (dtbl.Rows.Count > 0)
                {
                    dcSum = decimal.Parse(dtbl.Compute("Sum(Credit)", string.Empty).ToString());
                    dcProfitOpening = dcProfitOpening + dcSum;
                }
            }
        }
        DataTable dtblProfitLedgerOpening = new DataTable();
        dtblProfitLedgerOpening = DsetBalanceSheet.Tables[3];
        decimal decProfitLedgerOpening = 0;
        foreach (DataRow dRow in dtblProfitLedgerOpening.Rows)
        {
            decProfitLedgerOpening += decimal.Parse(dRow["Balance"].ToString());
        }
        DataTable dtblProf = new DataTable();
        dtblProf = DsetBalanceSheet.Tables[2];
        decimal decProfitLedger = 0;
        if (dtblProf.Rows.Count > 0)
        {
            decProfitLedger = decimal.Parse(dtblProf.Compute("Sum(Balance)", string.Empty).ToString());
        }
        decimal decTotalProfitAndLoss = 0;
        if (dcProfitOpening >= 0)
        {
            decTotalProfitAndLoss = decProfitLedger;
        }
        else if (dcProfitOpening < 0)
        {
            decTotalProfitAndLoss = decProfitLedger;
        }
        index = 0;
        if (dcClosingStock >= 0)
        {
            //---------- Asset ----------//
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "Closing Stock" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + Math.Round(dcClosingStock, 2) + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
            </tr>";
            dcTotalAsset += dcClosingStock;
        }
        else
        {
            //--------- Liability ---------//
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "Closing Stock" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + Math.Round(dcClosingStock, 2) + @"</td>
            </tr>";
            dcTotalLiability += -dcClosingStock;
        }

        decimal decOpeningOfProfitAndLoss = decProfitLedgerOpening + dcProfitOpening;
        decimal decTotalProfitAndLossOverAll = decTotalProfitAndLoss + decOpeningOfProfitAndLoss + decCurrentProfitLoss;
        if (decTotalProfitAndLossOverAll <= 0)
        {
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "----------------------------------------" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
            </tr>";
            foreach (DataRow dRow in dtblProf.Rows)
            {
                if (dRow["Name"].ToString() == "Profit And Loss Account")
                {
                    values += @"<tr>
<td style='width: 260px;font-style:bold; color:red;text-align: left;'>" + dRow["Name"].ToString() + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
            </tr>";
                    if (decCurrentProfitLoss < 0)
                    {
                        decCurrentProfitLoss = decCurrentProfitLoss * -1;
                    }
                    values += @"<tr>
<td style='width: 260px;font-style:bold; color:black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + Math.Round(decTotalProfitAndLoss + decCurrentProfitLoss, 2) + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
            </tr>";
                }
            }
            //-------------- Asset ---------------//
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:DarkSlateGray;text-align: left;'>" + "Profit And Loss (Opening)" + @"</td>
<td style='width: 140px;font-style:bold; color:DarkSlateGray;'>" + Math.Round(decTotalProfitAndLoss, 2) + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
            </tr>";
            //-------------- Asset ---------------//
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:DarkSlateGray;text-align: left;'>" + "Current Period" + @"</td>
<td style='width: 140px;font-style:bold; color:DarkSlateGray;'>" + Math.Round(decCurrentProfitLoss, 2) + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
            </tr>";
            dcTotalAsset = dcTotalAsset + (decCurrentProfitLoss + decTotalProfitAndLoss);
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "----------------------------------------" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
            </tr>";
        }
        else if (decTotalProfitAndLossOverAll > 0)
        {
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:black;'>" + "----------------------------------------" + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + "" + @"</td>
            </tr>";
            foreach (DataRow dRow in dtblProf.Rows)
            {
                if (dRow["Name"].ToString() == "Profit And Loss Account")
                {
                    values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:DarkSlateGray;'>" + dRow[1].ToString() + @"</td>
<td style='width: 140px;font-style:bold; color:black;'>" + Math.Round(decTotalProfitAndLoss + decCurrentProfitLoss, 2) + @"</td>
            </tr>";
                }
            }
            //------------ Liability ------------//
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:DarkSlateGray;'>" + "Profit And Loss (Opening)" + @"</td>
<td style='width: 140px;font-style:bold; color:DarkSlateGray;'>" + Math.Round(decTotalProfitAndLoss, 2) + @"</td>
            </tr>";
            dcTotalLiability += decOpeningOfProfitAndLoss;
            //------------ Liability ------------//

            values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:DarkSlateGray;'>" + "Current Period" + @"</td>
<td style='width: 140px;font-style:bold; color:DarkSlateGray;'>" + Math.Round(decCurrentProfitLoss, 2) + @"</td>
            </tr>";
            dcTotalLiability = dcTotalLiability + (decCurrentProfitLoss + decTotalProfitAndLoss); //dcProfit;
            values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:DarkSlateGray;'>" + "----------------------------------------" + @"</td>
<td style='width: 140px;font-style:bold; color:DarkSlateGray;'>" + "" + @"</td>
            </tr>";
        }
        decimal dcDiffAsset = 0;
        decimal dcDiffLiability = 0;
        decimal dcTotalValue = dcTotalAsset;
        if (dcTotalAsset != dcTotalLiability)
        {
            if (dcTotalAsset > dcTotalLiability)
            {
                //--------------- Liability exceeds so in asset side ----------------//

                values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:DarkRed;'>" + "Difference" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + Math.Round((dcTotalAsset - dcTotalLiability), 2) + @"</td>
            </tr>";
                dcDiffLiability = dcTotalAsset - dcTotalLiability;
            }
            else
            {
                //--------------- Asset exceeds so in liability side ----------------//
                values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:DarkRed;'>" + "Difference" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + Math.Round((dcTotalLiability - dcTotalAsset), 2) + @"</td>
            </tr>";
                dcDiffAsset = dcTotalLiability - dcTotalAsset;
            }
        }
        values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "" + @"</td>
<td style='width: 260px;font-style:bold; color:DarkRed;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "" + @"</td>
            </tr>";
        values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "__________________________" + @"</td>
<td style='width: 260px;font-style:bold; color:DarkRed;'>" + "" + @"</td>
<td style='width: 140px;font-style:bold; color:Black;'>" + "__________________________" + @"</td>
            </tr>";
        values += @"<tr>
<td style='width: 260px;font-style:bold; color:Black;text-align: left;'>" + "Total" + @"</td>
<td style='width: 140px;font-style:bold; text-align:right; color:Black;'>" + Math.Round((dcTotalAsset + dcDiffAsset), 2) + @"</td>
<td style='width: 260px;font-style:bold; color:DarkRed;'>" + "Total" + @"</td>
<td style='width: 140px;font-style:bold; text-align:right; color:Black;'>" + Math.Round((dcTotalLiability + dcDiffLiability), 2) + @"</td>
            </tr>";
        decPrintOrNot = dcTotalAsset + dcDiffAsset;
        decPrintOrNot1 = dcTotalLiability + dcDiffLiability;
        if (inCurrenRowIndex >= 0 && dtbl.Rows.Count > 0 && inCurrenRowIndex < dtbl.Rows.Count)
        {
            //if (dtbl.Rows[inCurrenRowIndex].Cells[inCurentcolIndex].Visible)
            //{
            //    dtbl.CurrentCell = dtbl.Rows[inCurrenRowIndex].Cells[inCurentcolIndex];
            //}
            //if (dtbl.CurrentCell != null && dtbl.CurrentCell.Visible)
            //    dtbl.CurrentCell.Selected = true;
        }
        inCurrenRowIndex = 0;
        values += " </table>";
        myMarkup = values;
    }
    string convertImageToDisplay(byte[] image)
    {
        if (image != null)
        {
            var base64 = Convert.ToBase64String(image);
            var finalStr = string.Format("data:image/jpg;base64,{0}", base64);
            return finalStr;
        }
        return "";
    }
    }
