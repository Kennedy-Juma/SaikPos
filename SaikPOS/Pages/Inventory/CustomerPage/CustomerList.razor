@page "/sales/customerlist"
@inject IAccountLedger accountLedger
@inject IJSRuntime JsRuntime
@inject NavigationManager navManager
@inject ISnackbar Snackbar

<div class="content">
                <ol class="breadcrumb">
                <li><a href="/"><i class="pe-7s-home"></i> Home</a></li>
                <li><a href="/">Sales</a></li>
                <li class="active">Manage Customer</li>
            </ol>
            
                    <!-- load messages -->
                                        <div class="se-pre-con" style="display: none;"></div>
                    <!-- load custom page -->
                    <div class="row">
	<div class="col-sm-12">
                <div class="panel panel-bd lobidrag">
                    <div class="panel-heading">
                        <div class="panel-title">
                            <span>Manage Customer</span>
                           <span class="padding-lefttitle">
                            <a href="/sales/customeradd" class="btn btn-primary m-b-5 m-r-2"><i class="ti-plus"> </i>  Add Customer </a>
                                               </span>

                        </div>
                    </div>
                    <div class="panel-body">
                        <div class="table-responsive">
                            <MudTable Items="@listModel" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<AccountLedgerView,bool>(Search)">
    <ToolBarContent>
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Customer Name</MudTh>
        <MudTh>Code</MudTh>
        <MudTh>Account Group</MudTh>
        @*<MudTh>Address</MudTh>*@
        <MudTh>Email</MudTh>
        <MudTh>Mobile</MudTh>
        <MudTh>Opening Balance</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="LedgerName">@context.LedgerName</MudTd>
        <MudTd DataLabel="LedgerCode">@context.LedgerCode</MudTd>
        <MudTd DataLabel="AccountGroupName">@context.AccountGroupName</MudTd>
        @*<MudTd DataLabel="Address">@context.Address</MudTd>*@
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Mobile">@context.Mobile</MudTd>
        <MudTd DataLabel="OpeningBalance">@context.OpeningBalance</MudTd>
        <MudTd DataLabel="">
            <center>
                                     <a href="/sales/customeredit/@context.LedgerId" class="btn btn-info btn-sm" data-toggle="tooltip" data-placement="left" title="" data-original-title="Update">
                                         <i class="fa fa-pencil" aria-hidden="true"></i></a>
                                          <a @onclick="() => Delete(context.LedgerId)" class="btn btn-danger btn-sm" data-toggle="tooltip" data-placement="right" title="" data-original-title="Delete "><i class="fa fa-trash-o" aria-hidden="true"></i></a>
                                                                                
                                    </center>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] {10, 20, 50, 100}" />
    </PagerContent>
</MudTable>
                        </div>
                    </div>
                </div>
            </div>
</div>                </div>

@code {
    private bool dense = true;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = true;
    private string searchString1 = "";
    private string searchString2 = "";
    List<AccountLedgerView> listModel;
    protected override void OnInitialized()
    {
        LoadData();
    }
    private async void LoadData()
    {
        listModel = accountLedger.ViewAllCustomer(1);
    }
    async Task Delete(long id)
    {
            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
            if (confirmed)
            {
                if (id != 1)
                {
                    bool isSave = false;
                    isSave = accountLedger.Delete(id);
                    if (isSave == true)
                    {
                        Snackbar.Add("Delete Successfully.", Severity.Success);
                        LoadData();
                    }
                    else
                    {
                        Snackbar.Add("Cannot be delete. already in used.", Severity.Info);
                    }
                }
                else
                {
                    Snackbar.Add("Default data cannot be delete.", Severity.Info);
                }
            }
    }
    private bool Search(AccountLedgerView element)
    {
        if (string.IsNullOrWhiteSpace(searchString1))
            return true;
        if (element.LedgerName.Contains(searchString1, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.AccountGroupName.Contains(searchString1, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
