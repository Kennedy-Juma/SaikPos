// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace SaikPOS.Pages.InventoryReports
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using SaikPOS;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using SaikPOS.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using SaikPOS.Data.Setting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using SaikPOS.Data.Transaction;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using SaikPOS.Data.ViewModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using SaikPOS.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using SaikPOS.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using SaikPOS.Services.Interface;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using SaikPOS.Services.Repository;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using SaikPOS.PdfReport;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using Blazored.Typeahead;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using SaikPOS.Services.CartService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Personal Projects\SaikPOS\SaikPOS\Pages\InventoryReports\CustomerLedger.razor"
using System.Data;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/inventory/customerledger")]
    public partial class CustomerLedger : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 112 "E:\Personal Projects\SaikPOS\SaikPOS\Pages\InventoryReports\CustomerLedger.razor"
       
    List<AccountLedgerView> listCustomer = new List<AccountLedgerView>();
    long LedgerId = 0;
    DateTime FromDate = DateTime.Now;
    DateTime ToDate = DateTime.Now;
    Company company = new Company();
    string myMarkup;
    protected async override void OnInitialized()
    {
        company = icompany.Edit(1);
        listCustomer = ledger.ViewAllCustomer(1);
    }
    protected void Search()
    {
        string values = @"<table class='table table-striped'>
                <tr>
                    <th style='display:none;'>SN</th>
                    <th>Date</th>
                    <th>Voucher No</th>
                    <th>Particular</th>
                    <th>Dr.Amount / Receive</th>
                    <th>Cr.Amount / Sales</th>
                    <th>Balance</th>
                </tr> ";

            //OpeningBlnce
            DataTable dtblsubOpening = new DataTable();
            DataSet dsetOpening = new DataSet();
            dsetOpening = report.CustomerLedgerOpening(Convert.ToDateTime(FromDate), LedgerId, 1);
            int counter1 = 0;
            dtblsubOpening = dsetOpening.Tables[0];
            decimal decDebit = 0;
            decimal decCredit = 0;
            decimal totlDebit = 0;
            decimal totlCredit = 0;
            if (dtblsubOpening.Rows.Count > 0)
            {
                for (int i = 0; i < dtblsubOpening.Rows.Count; i++)
                {
                    decDebit = Convert.ToDecimal(dtblsubOpening.Rows[i]["debit"].ToString());
                    decCredit = Convert.ToDecimal(dtblsubOpening.Rows[i]["credit"].ToString());
                    counter1++;
                    values += @"<tr>
            <td style='display:none;'>" + counter1.ToString() + @"</td>
            <td>" + @FromDate + @"</td>
            <td>" + "" + @"</td>
            <td style='font-style:bold; color:red; font-size:16px;'>" + "Opening Amount" + @"</td>
            <td>" + dtblsubOpening.Rows[i]["debit"].ToString() + @"</td>
            <td>" + dtblsubOpening.Rows[i]["credit"].ToString() + @"</td>
            <td>" + "" + @"</td>
        </tr>";


                }
            }

            DataTable dtblsub = new DataTable();
            DataSet dset = new DataSet();
            dset = report.CustomerLedger(Convert.ToDateTime(FromDate), Convert.ToDateTime(ToDate), LedgerId, 1);
            int counter = 0;
            dtblsub = dset.Tables[0];
            string strBalance = string.Empty;


            if (dtblsub.Rows.Count > 0)
            {
                for (int i = 0; i < dtblsub.Rows.Count; i++)
                {
                    counter++;
                    if (counter == 1)
                    {
                        strBalance = CalculateBalance(i, decDebit + decimal.Parse(dtblsub.Rows[i]["debit"].ToString()), decimal.Parse(dtblsub.Rows[i]["credit"].ToString()) + decCredit, strBalance);
                    }
                    else
                    {
                        strBalance = CalculateBalance(i, decimal.Parse(dtblsub.Rows[i]["debit"].ToString()), decimal.Parse(dtblsub.Rows[i]["credit"].ToString()), strBalance);
                    }
                    long decVoucherTypeId = Convert.ToInt64(dtblsub.Rows[i]["voucherTypeId"].ToString());
                    totlDebit = totlDebit + decimal.Parse(dtblsub.Rows[i]["debit"].ToString());
                    totlCredit = totlCredit + decimal.Parse(dtblsub.Rows[i]["credit"].ToString());
                    if (decVoucherTypeId == 19)
                    {
                        values += @"<tr>
            <td style='display:none;'>" + counter.ToString() + @"</td>
            <td>" + dtblsub.Rows[i]["Date"].ToString() + @"</td>
            <td>" + dtblsub.Rows[i]["voucherNo"].ToString() + @" </td>
            <td style='font-style:bold; color:black; font-size:16px;'>" + dtblsub.Rows[i]["particular"].ToString() + @"</td>
            <td> " + dtblsub.Rows[i]["debit"].ToString() + @"</td>
            <td> " + dtblsub.Rows[i]["credit"].ToString() + @"</td>
            <td>" + strBalance.ToString() + @"</td>
        </tr>";
                    }
                    else if (decVoucherTypeId == 20)
                    {
                        values += @"<tr>
            <td style='display:none;'>" + counter.ToString() + @"</td>
            <td>" + dtblsub.Rows[i]["Date"].ToString() + @"</td>
            <td>" + dtblsub.Rows[i]["voucherNo"].ToString() + @" </td>
            <td style='font-style:bold; color:black; font-size:16px;'>" + dtblsub.Rows[i]["particular"].ToString() + @"</td>
            <td> " + dtblsub.Rows[i]["debit"].ToString() + @"</td>
            <td> " + dtblsub.Rows[i]["credit"].ToString() + @"</td>
            <td>" + strBalance.ToString() + @"</td>
        </tr>";
                    }
                    else if (decVoucherTypeId == 5)
                    {
                        values += @"<tr>
            <td style='display:none;'>" + counter.ToString() + @"</td>
            <td>" + dtblsub.Rows[i]["Date"].ToString() + @"</td>
            <td>" + dtblsub.Rows[i]["voucherNo"].ToString() + @" </td>
            <td style='font-style:bold; color:black; font-size:16px;'>" + dtblsub.Rows[i]["particular"].ToString() + @"</td>
            <td> " + dtblsub.Rows[i]["debit"].ToString() + @"</td>
            <td> " + dtblsub.Rows[i]["credit"].ToString() + @"</td>
            <td>" + strBalance.ToString() + @"</td>
        </tr>";
                    }

                }
            }
            decimal decTotlDebitss = totlDebit + decDebit;
            decimal decTotlCreditss = totlCredit + decCredit;
            decimal decBlnce = decTotlDebitss - decTotlCreditss;
            values += @"<tr>
<td style='display:none;'></td>
<td></td>
<td style='font-style:bold; color:black; font-size:16px;'>Total</td>
<td>" + "" + @"</td>
<td style='font-style:bold; color:black; font-size:16px;'>" + decTotlDebitss + @"</td>
<td style='font-style:bold; color:black; font-size:16px;'>" + decTotlCreditss + @"</td>
<td>" + decBlnce + @"</td>
</tr>";
            values += "</table>";
            myMarkup = values;
    }
    string convertImageToDisplay(byte[] image)
    {
        if (image != null)
        {
            var base64 = Convert.ToBase64String(image);
            var finalStr = string.Format("data:image/jpg;base64,{0}", base64);
            return finalStr;
        }
        return "";
    }
    private string CalculateBalance(int index, decimal decDebit, decimal decCredit, string strPreviousBalance)
    {
        string strCurrentBalance = string.Empty;
        string strCrOrDr = string.Empty;
        decimal decRowBalance = 0;
        try
        {
            if (index > 0)
            {
                string[] strLastBalance = strPreviousBalance.Split(' ');
                if (strLastBalance.Length >= 2)
                {
                    if ((strLastBalance[1] == null ? "" : strLastBalance[1]) != string.Empty)
                    {
                        if (strLastBalance[1] == "Dr")
                        {
                            decDebit = decimal.Parse(strLastBalance[0]) + decDebit;
                        }
                        if (strLastBalance[1] == "Cr")
                        {
                            decCredit = decimal.Parse(strLastBalance[0]) + decCredit;
                        }
                    }
                }
            }
            decRowBalance = decDebit - decCredit;
            if (decRowBalance > 0)
                strCrOrDr = " Dr";
            else if (decRowBalance < 0)
            {
                decRowBalance = decRowBalance * (-1);
                strCrOrDr = " Cr";
            }
            else
                strCrOrDr = string.Empty;
        }
        catch (Exception ex)
        {
            throw ex;
        }
        return strCurrentBalance = Convert.ToString(decRowBalance) + strCrOrDr;
    }
    

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISnackbar Snackbar { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICompany icompany { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IInventoryReport report { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAccountLedger ledger { get; set; }
    }
}
#pragma warning restore 1591
