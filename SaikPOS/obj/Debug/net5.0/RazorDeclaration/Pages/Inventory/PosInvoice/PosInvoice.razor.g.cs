// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace SaikPOS.Pages.Inventory.PosInvoice
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using SaikPOS;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using SaikPOS.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using SaikPOS.Data.Setting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using SaikPOS.Data.Transaction;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using SaikPOS.Data.ViewModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using SaikPOS.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using SaikPOS.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using SaikPOS.Services.Interface;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using SaikPOS.Services.Repository;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using SaikPOS.PdfReport;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using Blazored.Typeahead;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using SaikPOS.Services.CartService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "E:\Personal Projects\SaikPOS\SaikPOS\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "E:\Personal Projects\SaikPOS\SaikPOS\Pages\Inventory\PosInvoice\PosInvoice.razor"
using Microsoft.Data.SqlClient;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "E:\Personal Projects\SaikPOS\SaikPOS\Pages\Inventory\PosInvoice\PosInvoice.razor"
using Dapper;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "E:\Personal Projects\SaikPOS\SaikPOS\Pages\Inventory\PosInvoice\PosInvoice.razor"
using System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "E:\Personal Projects\SaikPOS\SaikPOS\Pages\Inventory\PosInvoice\PosInvoice.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "E:\Personal Projects\SaikPOS\SaikPOS\Pages\Inventory\PosInvoice\PosInvoice.razor"
           [Authorize]

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Components.LayoutAttribute(typeof(PosLayout))]
    [global::Microsoft.AspNetCore.Components.RouteAttribute("/sales/pos")]
    public partial class PosInvoice : global::Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 306 "E:\Personal Projects\SaikPOS\SaikPOS\Pages\Inventory\PosInvoice\PosInvoice.razor"
       
    SalesMaster  master = new SalesMaster();
    InventorySetting setting = new InventorySetting();
    AccountLedger ledger = new AccountLedger();
    InventorySetting settingView = new InventorySetting();
    bool open;
    Anchor anchor;
    ProductView product = new ProductView();
    CartItem productDetails = new CartItem();
    IEnumerable<ProductView> listProduct;
    List<AccountLedgerView> subledger = new List<AccountLedgerView>();
    List<Category> listCategory = new List<Category>();
    List<Tax> listTaxItem;
    //TodoTask
    List<CartItem> cartItems = new List<CartItem>();
    private CartItem cartItem = new CartItem { Qty = 1 };
    bool isShow = false;
    string Title;
    string strSerialNo;
    string strPrefix;
    string strSuffix;
    long decVouchertypeIdSalesInvoice = 19;
    long decVoucherReceiveId = 5;

    public byte[] ImageUploaded { get; set; }
    int counter = 1;
    long CategoryId = 0;
    string ProductName = string.Empty;
    string Barcode = string.Empty;
    protected async override void OnInitialized()
    {
        //CheckPriviliage
        settingView = settingRepository.EditInventorySetting(decVouchertypeIdSalesInvoice);
        strPrefix = settingView.Prefix;
        strSuffix = settingView.Suffix;
        bool collapseNavMenu = false;
        LoadData();
    }
    protected async void LoadData()
    {
        if (settingView.VoucherNoAutomatic == true)
        {
            strSerialNo = salesInvoiceRepository.GetSalesvoucherNo(1, 1, decVouchertypeIdSalesInvoice);
            master.VoucherNo = strPrefix + strSerialNo + strSuffix;
        }
        else
        {
            master.VoucherNo = string.Empty;
            strSerialNo = "0";
        }
        master.Date = DateTime.Now;
        master.NepaliDate = string.Empty;
        master.DueDateNep = string.Empty;
        master.InvoiceNo = string.Empty;
        master.DueDate = DateTime.Now;
        master.NetAmounts = 0;
        master.TotalAmount = 0;
        master.TaxRate = 0;
        master.TotalTax = 0;
        master.DisPer = 0;
        master.BillDiscount = 0;
        master.CashAmount = 0;
        master.BankAmount = 0;
        master.CreditAmount = 0;
        master.GrandTotal = 0;
        master.PreviousDue = 0;
        master.Narration = string.Empty;
        subledger = ledgerRepository.ViewAllCustomer(1); //1 is companyid
        listProduct = productRepository.ViewAllProduct(1);//1 is companyid
        listCategory = category.GetAll();
        CartService.EmptyCart();
        master.SalesManId = 1;
        product.TaxId = 1;
        master.TaxId = 1;
        master.CashId = 1;
        master.BankId = 13;
        StateHasChanged();
    }
    protected async void Save()
    {
        //CheckNegativeStockAndNegativeLedger
        long decProductId = 0;
        long decBatchId = 0;
        decimal decCalcQty = 0;
        string strStatus = setting.NegativestockStatus;
        bool isNegativeLedger = false;
        DataTable dtblPurchaseMasterViewById = new DataTable();
        if (cartItems != null)
        {

            foreach (var list in cartItems)
            {
                decProductId = list.ProductId;
                if (list.BatchId > 0)
                {
                    decBatchId = list.BatchId;
                }
                decimal decCurrentStock = stockPosting.StockCheckForProductSale(decProductId, decBatchId);
                if (list.Qty > 0)
                {
                    decCalcQty = decCurrentStock - list.Qty;
                }
                if (decCalcQty < 0)
                {
                    isNegativeLedger = true;
                    break;
                }
            }
            if (isNegativeLedger)
            {
                if (strStatus == "Warn")
                {
                    bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Negative Stock balance exists,Do you want to Continue?");
                    if (confirmed)
                    {
                        SaveOrEdit();

                    }
                }
                else if (strStatus == "Block")
                {
                    Snackbar.Add("Cannot continue ,due to negative stock balance.", Severity.Info);
                }
                else
                {
                    SaveOrEdit();
                }
            }
            else
            {
                SaveOrEdit();
            }
        }
    }
    protected void SaveOrEdit()
    {
        decimal decGrand = 0;
        decimal decCashBankAmount = 0;
        decimal decDue = 0;
        decGrand = master.GrandTotal;
        decCashBankAmount = master.CashAmount + master.BankAmount;
        decDue = decGrand - decCashBankAmount;
        if (cartItems == null)
        {
            Snackbar.Add("Invalid Entry.", Severity.Info);
        }
        else if (master.LedgerId == 0)
        {
            Snackbar.Add("Choose Customer.", Severity.Info);
        }
        else if (master.VoucherNo == string.Empty)
        {
            Snackbar.Add("Type Voucherno.", Severity.Info);
        }
        else if (master.GrandTotal == 0)
        {
            Snackbar.Add("Invalid Entry.", Severity.Info);
        }
        else
        {
            var strVoucherNo = false;
            strVoucherNo = salesInvoiceRepository.AccountSalesInvoiceNoCheckExistence(1, 1, master.VoucherNo);
            if (strVoucherNo == false)
            {
                SqlConnection sqlcon = new SqlConnection(_conn.DbConn);
                sqlcon.Open();
                SqlTransaction sql = sqlcon.BeginTransaction();
                var para = new DynamicParameters();
                para.Add("@SerialNo", strSerialNo);
                para.Add("@VoucherNo", master.VoucherNo);
                para.Add("@InvoiceNo", master.VoucherNo);
                para.Add("@SuffixPrefixId", 0);
                para.Add("@Date", master.Date);
                para.Add("@NepaliDate", master.NepaliDate);
                para.Add("@LedgerId", master.LedgerId);
                para.Add("@DueDate", master.DueDate);
                para.Add("@DueDateNep", master.DueDateNep);
                para.Add("@CreditPeriod", master.CreditPeriod);
                para.Add("@ExchangeRateId", 1);
                para.Add("@POS", true);
                para.Add("@Narration", master.Narration);
                para.Add("@SalesAccount", 10);
                para.Add("@SalesManId", master.SalesManId);
                para.Add("@CounterId", 1);
                para.Add("@PricinglevelId", 1);
                para.Add("@DeliveryNoteMasterId", 0);
                para.Add("@OrderMasterId", 0);
                para.Add("@QuotationMasterId", 0);
                para.Add("@AdditionalCost", master.AdditionalCost);
                para.Add("@CreditAmount", master.CreditAmount);
                para.Add("@BankAmount", master.BankAmount);
                para.Add("@CashAmount", master.CashAmount);
                para.Add("@NetAmounts", master.NetAmounts);
                para.Add("@TaxId", master.TaxId);
                para.Add("@TaxRate", master.TaxRate);
                para.Add("@TotalTax", master.TotalTax);
                para.Add("@DisPer", master.DisPer);
                para.Add("@BillDiscount", master.BillDiscount);
                para.Add("@CheckDis", master.CheckDis);
                para.Add("@GrandTotal", master.GrandTotal);
                para.Add("@TotalAmount", master.TotalAmount);
                para.Add("@PreviousDue", master.PreviousDue);
                para.Add("@LrNo", master.LrNo);
                para.Add("@TransportationCompany", master.TransportationCompany);
                para.Add("@VoucherTypeId", decVouchertypeIdSalesInvoice);
                para.Add("@UserId", 1);
                para.Add("@FinancialYearId", 1);
                para.Add("@CompanyId", 1);
                para.Add("@CashId", master.CashId);
                para.Add("@BankId", master.BankId);
                para.Add("@BalanceDue", decDue);
                if (decDue == 0)
                {
                    para.Add("@Status", "Paid");
                }
                else if (master.GrandTotal > decDue)
                {
                    para.Add("@Status", "Partial Paid");
                }
                else
                {
                    para.Add("@Status", "Draft");
                }
                para.Add("@AddedDate", DateTime.Now);
                para.Add("@CreatedBy", 1);
                para.Add("@MemIDOUT", dbType: DbType.Int64, direction: ParameterDirection.Output);
                sqlcon.Execute("SalesInvoiceInsert", para, sql, 0, CommandType.StoredProcedure);
                long MemID = para.Get<long>("MemIDOUT");
                if (MemID > 0)
                {

                    foreach (var item in cartItems)
                    {
                        var paraOpening = new DynamicParameters();
                        paraOpening.Add("@SalesMasterId", MemID);
                        paraOpening.Add("@DeliveryNoteDetailsId", 0);
                        paraOpening.Add("@OrderDetailsId", 0);
                        paraOpening.Add("@QuotationDetailsId", 0);
                        paraOpening.Add("@ProductId", item.ProductId);
                        paraOpening.Add("@Qty", item.Qty);
                        paraOpening.Add("@Rate", item.SalesRate);
                        paraOpening.Add("@UnitId", item.UnitId);
                        paraOpening.Add("@UnitConversionId", 1);
                        paraOpening.Add("@Discount", item.Discount);
                        paraOpening.Add("@DiscountAmount", item.DiscountAmount);
                        if (item.TaxId == 0)
                        {
                            paraOpening.Add("@TaxId", 1);
                        }
                        else
                        {
                            paraOpening.Add("@TaxId", item.TaxId);
                        }
                        paraOpening.Add("@BatchId", item.BatchId);
                        paraOpening.Add("@GodownId", 1);
                        paraOpening.Add("@RackId", 1);
                        paraOpening.Add("@TaxAmount", item.TaxAmount);
                        paraOpening.Add("@GrossAmount", 0);
                        paraOpening.Add("@NetAmount", item.NetAmount);
                        paraOpening.Add("@Amount", item.TotalAmount);
                        paraOpening.Add("@SlNo", 0);
                        paraOpening.Add("@JourDId", dbType: DbType.Int64, direction: ParameterDirection.Output);
                        sqlcon.Execute("SalesDetailsInsert", paraOpening, sql, 0, CommandType.StoredProcedure);
                        long longdetailsId = paraOpening.Get<long>("JourDId");
                        //StockPosting
                        var parastock = new DynamicParameters();
                        parastock.Add("@BatchId", item.BatchId);
                        parastock.Add("@Date", master.Date);
                        parastock.Add("@NepaliDate", master.NepaliDate);
                        parastock.Add("@CompanyId", 1);
                        parastock.Add("@FinancialYearId", 1);
                        parastock.Add("@LedgerId", master.LedgerId);
                        parastock.Add("@GodownId", 1);
                        parastock.Add("@InwardQty", 0);
                        parastock.Add("@OutwardQty", item.Qty);
                        parastock.Add("@ProductId", item.ProductId);
                        parastock.Add("@RackId", 1);
                        parastock.Add("@Rate", item.SalesRate);
                        parastock.Add("@UnitId", item.UnitId);
                        parastock.Add("@DetailsId", longdetailsId);
                        parastock.Add("@InvoiceNo", master.InvoiceNo);
                        parastock.Add("@VoucherNo", master.VoucherNo);
                        parastock.Add("@VoucherTypeId", decVouchertypeIdSalesInvoice);
                        parastock.Add("@AgainstInvoiceNo", "NA");
                        parastock.Add("@AgainstVoucherNo", "NA");
                        parastock.Add("@AgainstVoucherTypeId", 0);
                        parastock.Add("@StockCalculate", "Sales");
                        parastock.Add("@AddedDate", DateTime.Now);
                        var valuesStock = sqlcon.Query<long>("StockPostingInsert", parastock, sql, true, 0, commandType: CommandType.StoredProcedure);

                    }
                    //LedgerPosting
                    //Customer
                    var paraSc = new DynamicParameters();
                    paraSc.Add("@Date", master.Date);
                    paraSc.Add("@NepaliDate", master.NepaliDate);
                    paraSc.Add("@LedgerId", master.LedgerId);
                    paraSc.Add("@Debit", master.GrandTotal);
                    paraSc.Add("@Credit", 0);
                    paraSc.Add("@VoucherNo", master.VoucherNo);
                    paraSc.Add("@DetailsId", MemID);
                    paraSc.Add("@YearId", 1);
                    paraSc.Add("@InvoiceNo", string.Empty);
                    paraSc.Add("@VoucherTypeId", decVouchertypeIdSalesInvoice);
                    paraSc.Add("@CompanyId", 1);
                    paraSc.Add("@LongReference", master.Narration);
                    paraSc.Add("@ReferenceN", master.Narration);
                    paraSc.Add("@ChequeNo", string.Empty);
                    paraSc.Add("@ChequeDate", string.Empty);
                    paraSc.Add("@AddedDate", DateTime.Now);
                    var valueSc = sqlcon.Query<long>("LedgerPostingInsert", paraSc, sql, true, 0, commandType: CommandType.StoredProcedure);

                    //SalesAccount
                    decimal decSupplierCustomerAmount = Math.Round(master.NetAmounts - master.BillDiscount, 2);

                    var paraPs = new DynamicParameters();
                    paraPs.Add("@Date", master.Date);
                    paraPs.Add("@NepaliDate", master.NepaliDate);
                    paraPs.Add("@LedgerId", 10);
                    paraPs.Add("@Debit", 0);
                    paraPs.Add("@Credit", decSupplierCustomerAmount);
                    paraPs.Add("@VoucherNo", master.VoucherNo);
                    paraPs.Add("@DetailsId", MemID);
                    paraPs.Add("@YearId", 1);
                    paraPs.Add("@InvoiceNo", string.Empty);
                    paraPs.Add("@VoucherTypeId", decVouchertypeIdSalesInvoice);
                    paraPs.Add("@CompanyId", 1);
                    paraPs.Add("@LongReference", master.Narration);
                    paraPs.Add("@ReferenceN", master.Narration);
                    paraPs.Add("@ChequeNo", string.Empty);
                    paraPs.Add("@ChequeDate", string.Empty);
                    paraPs.Add("@AddedDate", DateTime.Now);
                    var valuePs = sqlcon.Query<long>("LedgerPostingInsert", paraPs, sql, true, 0, commandType: CommandType.StoredProcedure);

                    //Tax
                    if (master.TotalTax > 0)
                    {
                        var paraTax = new DynamicParameters();
                        paraTax.Add("@Date", master.Date);
                        paraTax.Add("@NepaliDate", master.NepaliDate);
                        paraTax.Add("@LedgerId", 14);
                        paraTax.Add("@Debit", 0);
                        paraTax.Add("@Credit", master.TotalTax);
                        paraTax.Add("@VoucherNo", master.VoucherNo);
                        paraTax.Add("@DetailsId", MemID);
                        paraTax.Add("@YearId", 1);
                        paraTax.Add("@InvoiceNo", string.Empty);
                        paraTax.Add("@VoucherTypeId", decVouchertypeIdSalesInvoice);
                        paraTax.Add("@CompanyId", 1);
                        paraTax.Add("@LongReference", master.Narration);
                        paraTax.Add("@ReferenceN", master.Narration);
                        paraTax.Add("@ChequeNo", string.Empty);
                        paraTax.Add("@ChequeDate", string.Empty);
                        paraTax.Add("@AddedDate", DateTime.Now);
                        var valueTax = sqlcon.Query<long>("LedgerPostingInsert", paraTax, sql, true, 0, commandType: CommandType.StoredProcedure);
                    }

                }
                sql.Commit();
                Snackbar.Add("Saved Successfully.", Severity.Info);
                navManager.NavigateTo($"/sales/salesinvoicedetails/{MemID}");
            }
            else
            {
                Snackbar.Add("Voucher No Already Exit.", Severity.Info);
            }
        }
    }
    string convertImageToDisplay(byte[] image)
    {
        if (image != null)
        {
            var base64 = Convert.ToBase64String(image);
            var finalStr = string.Format("data:image/jpg;base64,{0}", base64);
            return finalStr;
        }
        return "";
    }
    protected async void CategoryClicked(long id)
    {
        listProduct = productRepository.ViewCategoryWiseProduct(id);//1 is companyid
        StateHasChanged();
    }
    protected async void ProductClicked(long id)
    {
        var myTodoss = listProduct.FirstOrDefault(x => x.ProductId == id);
        

#line default
#line hidden
#nullable disable
#nullable restore
#line 692 "E:\Personal Projects\SaikPOS\SaikPOS\Pages\Inventory\PosInvoice\PosInvoice.razor"
         if (myTodoss != null)
        {
            foreach(var item in cartItems)
            {
                if(myTodoss.ProductId == item.ProductId)
                {
                    Snackbar.Add("This product is already added.", Severity.Warning);
                    return;
                }
            }
            cartItem.ProductId = myTodoss.ProductId;
            cartItem.ProductCode = myTodoss.ProductCode;
            cartItem.ProductName = myTodoss.ProductName;
        cartItem.Barcode = myTodoss.Barcode;
        cartItem.UnitId = myTodoss.UnitId;
        cartItem.BatchId = myTodoss.BatchId;
        cartItem.SalesRate = myTodoss.SalesRate;
        cartItem.Mrp = myTodoss.Mrp;
        cartItem.SalesRate = myTodoss.SalesRate;
        cartItem.Discount = myTodoss.Discount;
        cartItem.DiscountAmount = myTodoss.DiscountAmount;
        cartItem.TaxId = myTodoss.TaxId;
        cartItem.TaxRate = myTodoss.TaxRate;
        cartItem.TaxAmount = myTodoss.TaxAmount;
        cartItem.Amount = Math.Round(1 * myTodoss.SalesRate , 2);
        cartItem.TotalAmount = Math.Round(1 * myTodoss.SalesRate , 2);
        cartItem.NetAmount = myTodoss.NetAmount;
        cartItem.UnitName = myTodoss.UnitName;
        cartItem.TaxName = myTodoss.TaxName;
        cartItem.CurrentStock = myTodoss.CurrentStock;
        await CartService.AddToCart(cartItem);
        //Snackbar.Add("Successfully add to cart.", Severity.Info);
        cartItems = await CartService.GetCartItems();
            listProduct = productRepository.ViewAllProduct(1);
            CalculateTotal();
            StateHasChanged();
        }
        else
        {
            
        }

#line default
#line hidden
#nullable disable
#nullable restore
#line 732 "E:\Personal Projects\SaikPOS\SaikPOS\Pages\Inventory\PosInvoice\PosInvoice.razor"
         
    }
    protected async void OnChange(object value, string name)
    {
        var myTodoss = listProduct.FirstOrDefault(x => x.ProductName == value);
        

#line default
#line hidden
#nullable disable
#nullable restore
#line 737 "E:\Personal Projects\SaikPOS\SaikPOS\Pages\Inventory\PosInvoice\PosInvoice.razor"
         if (myTodoss != null)
        {
            foreach(var item in cartItems)
            {
                if(myTodoss.ProductId == item.ProductId)
                {
                    Snackbar.Add("This product is already added.", Severity.Warning);
                    return;
                }
            }
            cartItem.ProductId = myTodoss.ProductId;
            cartItem.ProductCode = myTodoss.ProductCode;
            cartItem.ProductName = myTodoss.ProductName;
        cartItem.Barcode = myTodoss.Barcode;
        cartItem.UnitId = myTodoss.UnitId;
        cartItem.BatchId = myTodoss.BatchId;
        cartItem.SalesRate = myTodoss.SalesRate;
        cartItem.Mrp = myTodoss.Mrp;
        cartItem.SalesRate = myTodoss.SalesRate;
        cartItem.Discount = myTodoss.Discount;
        cartItem.DiscountAmount = myTodoss.DiscountAmount;
        cartItem.TaxId = myTodoss.TaxId;
        cartItem.TaxRate = myTodoss.TaxRate;
        cartItem.TaxAmount = myTodoss.TaxAmount;
        cartItem.Amount = Math.Round(1 * myTodoss.SalesRate , 2);
        cartItem.TotalAmount = Math.Round(1 * myTodoss.SalesRate , 2);
        cartItem.NetAmount = myTodoss.NetAmount;
        cartItem.UnitName = myTodoss.UnitName;
        cartItem.TaxName = myTodoss.TaxName;
        cartItem.CurrentStock = myTodoss.CurrentStock;
        await CartService.AddToCart(cartItem);
        //Snackbar.Add("Successfully add to cart.", Severity.Info);
        cartItems = await CartService.GetCartItems();
            listProduct = productRepository.ViewAllProduct(1);
            CalculateTotal();
            StateHasChanged();
        }
        else
        {
            
        }

#line default
#line hidden
#nullable disable
#nullable restore
#line 777 "E:\Personal Projects\SaikPOS\SaikPOS\Pages\Inventory\PosInvoice\PosInvoice.razor"
         
    }
    private async Task DeleteItem(CartItem item)
    {
        await CartService.DeleteItem(item);
        cartItems = await CartService.GetCartItems();
        CalculateTotal();
        StateHasChanged();
    }
    private async Task AddToCart(CartItem items)
    {

        cartItem.ProductId = items.ProductId;
        cartItem.ProductCode = items.ProductCode;
        cartItem.ProductName = items.ProductName;
        cartItem.Barcode = items.Barcode;
        cartItem.UnitId = items.UnitId;
        cartItem.BatchId = items.BatchId;
        cartItem.SalesRate = items.SalesRate;
        cartItem.Mrp = items.Mrp;
        cartItem.SalesRate = items.SalesRate;
        cartItem.Discount = items.Discount;
        cartItem.DiscountAmount = items.DiscountAmount;
        cartItem.TaxId = items.TaxId;
        cartItem.TaxRate = items.TaxRate;
        cartItem.TaxAmount = items.TaxAmount;
        cartItem.Amount = items.Amount;
        cartItem.TotalAmount = items.TotalAmount;
        cartItem.NetAmount = items.NetAmount;
        cartItem.UnitName = items.UnitName;
        cartItem.TaxName = items.TaxName;
        cartItem.CurrentStock = items.CurrentStock;
        cartItem.CartStatus = "equal";
        await CartService.AddToCart(cartItem);
        //Snackbar.Add("Successfully add to cart.", Severity.Info);
        cartItems = await CartService.GetCartItems();
        isShow = false;
        CalculateTotal();
        StateHasChanged();
    }
    private async Task AddToCartDsc(CartItem items)
    {

        cartItem.ProductId = items.ProductId;
        cartItem.ProductCode = items.ProductCode;
        cartItem.ProductName = items.ProductName;
        cartItem.Barcode = items.Barcode;
        cartItem.UnitId = items.UnitId;
        cartItem.BatchId = items.BatchId;
        cartItem.SalesRate = items.SalesRate;
        cartItem.Mrp = items.Mrp;
        cartItem.SalesRate = items.SalesRate;
        cartItem.Discount = items.Discount;
        cartItem.DiscountAmount = items.DiscountAmount;
        cartItem.TaxId = items.TaxId;
        cartItem.TaxRate = items.TaxRate;
        cartItem.TaxAmount = items.TaxAmount;
        cartItem.Amount = items.Amount;
        cartItem.TotalAmount = items.TotalAmount;
        cartItem.NetAmount = items.NetAmount;
        cartItem.UnitName = items.UnitName;
        cartItem.TaxName = items.TaxName;
        cartItem.CurrentStock = items.CurrentStock;
        cartItem.CartStatus = "Dsc";

        await CartService.AddToCart(cartItem);
        //Snackbar.Add("Successfully add to cart.", Severity.Info);
        cartItems = await CartService.GetCartItems();
        CalculateTotal();
        StateHasChanged();
    }
    private async Task AddToCartAsc(CartItem items)
    {
        if (items.Qty == 1)
        {

        }
        else
        {
            cartItem.ProductId = items.ProductId;
            cartItem.ProductCode = items.ProductCode;
            cartItem.ProductName = items.ProductName;
            cartItem.Barcode = items.Barcode;
            cartItem.UnitId = items.UnitId;
            cartItem.BatchId = items.BatchId;
            cartItem.SalesRate = items.SalesRate;
            cartItem.Mrp = items.Mrp;
            cartItem.SalesRate = items.SalesRate;
            cartItem.Discount = items.Discount;
            cartItem.DiscountAmount = items.DiscountAmount;
            cartItem.TaxId = items.TaxId;
            cartItem.TaxRate = items.TaxRate;
            cartItem.TaxAmount = items.TaxAmount;
            cartItem.Amount = items.Amount;
            cartItem.TotalAmount = items.TotalAmount;
            cartItem.NetAmount = items.NetAmount;
            cartItem.UnitName = items.UnitName;
            cartItem.TaxName = items.TaxName;
            cartItem.CurrentStock = items.CurrentStock;
            cartItem.CartStatus = "Asc";
            await CartService.AddToCart(cartItem);
            //Snackbar.Add("Successfully add to cart.", Severity.Info);
            cartItems = await CartService.GetCartItems();
            CalculateTotal();
            StateHasChanged();
        }
    }
    private void ShowModel(long id)
    {
        isShow = true;
        Title = "Product";
        var myTodoss = cartItems.FirstOrDefault(x => x.ProductId == id);
        

#line default
#line hidden
#nullable disable
#nullable restore
#line 889 "E:\Personal Projects\SaikPOS\SaikPOS\Pages\Inventory\PosInvoice\PosInvoice.razor"
         if (myTodoss != null)
        {
            productDetails.ProductId = myTodoss.ProductId;
            productDetails.ProductCode = myTodoss.ProductCode;
            productDetails.ProductName = myTodoss.ProductName;
        productDetails.Barcode = myTodoss.Barcode;
        productDetails.UnitId = myTodoss.UnitId;
         productDetails.BatchId = myTodoss.BatchId;
        productDetails.SalesRate = myTodoss.SalesRate;
        productDetails.Mrp = myTodoss.Mrp;
        productDetails.SalesRate = myTodoss.SalesRate;
        productDetails.Discount = myTodoss.Discount;
        productDetails.DiscountAmount = myTodoss.DiscountAmount;
        productDetails.TaxId = myTodoss.TaxId;
        productDetails.TaxRate = myTodoss.TaxRate;
        productDetails.TaxAmount = myTodoss.TaxAmount;
        productDetails.Amount = Math.Round(1 * myTodoss.SalesRate , 2);
        productDetails.TotalAmount = Math.Round(1 * myTodoss.SalesRate , 2);
        productDetails.NetAmount = myTodoss.NetAmount;
        productDetails.UnitName = myTodoss.UnitName;
        productDetails.TaxName = myTodoss.TaxName;
        productDetails.CurrentStock = myTodoss.CurrentStock;
        }
        else
        {
            
        }

#line default
#line hidden
#nullable disable
#nullable restore
#line 915 "E:\Personal Projects\SaikPOS\SaikPOS\Pages\Inventory\PosInvoice\PosInvoice.razor"
         
        StateHasChanged();
    }
    private void CloseModel()
    {
        isShow = false;
        StateHasChanged();
    }
    void CalculateTotal()
    {
        decimal decTotalAmount = 0;
        decimal decAdditionalCost = 0;
        decimal decTaxAmount = 0;
        decimal decTotalDisTax = 0;
        decimal decGrandTotalCshbnk = 0;
        decimal decNetAmount = 0;
        decimal decCheckTax = 0;
        decimal decGrandTotal = 0;
        foreach (var todo in cartItems)
        {
            decTotalAmount = decTotalAmount + todo.TotalAmount;
            decNetAmount = decNetAmount + todo.NetAmount;
            decCheckTax = decCheckTax + todo.TaxAmount;
        }
        master.NetAmounts = Math.Round(decNetAmount, 2);
        master.TotalAmount = Math.Round(decTotalAmount, 2);
        decimal decTotalAmountTax = 0;
        decTotalAmountTax = decTotalAmount + master.TotalTax;
        //if (master.CheckDis == "true")
        //{

            //master.BillDiscount = decTotalAmountTax * master.DisPer / 100;
            //decTotalDisTax = decTotalAmount;
        //}
        //else
        //{
            decTotalDisTax = decTotalAmount;
        if(master.BillDiscount > 0)
        {
            master.DisPer = (master.BillDiscount * 100) / (decTotalAmountTax);
        }
        //}
        if (decCheckTax > 0)
        {
            decTaxAmount = Math.Round(decCheckTax, 2);
            master.TotalTax = Math.Round(decCheckTax, 2);
        }
        else
        {
            decTaxAmount = decTotalDisTax * master.TaxRate / 100;
            master.TotalTax = Math.Round(decTaxAmount, 2);
        }
        decimal decDiscountAmount = 0;
        decDiscountAmount = master.BillDiscount;
        decGrandTotal = Math.Round((decTotalDisTax + decAdditionalCost + decTaxAmount) - (decDiscountAmount), 2);
        if (decGrandTotal >= 0)
        {
            master.GrandTotal = decGrandTotal;
        }
        else
        {
            master.BillDiscount = 0;
            master.GrandTotal = decGrandTotal;
        }
        decGrandTotalCshbnk = master.CashAmount + master.BankAmount;
        if (master.GrandTotal >= decGrandTotalCshbnk)
        {
            var decTotl = master.GrandTotal - decGrandTotalCshbnk;
            master.CreditAmount = Math.Round(decTotl, 2);
        }
        else
        {
            master.CreditAmount = 0;
            master.CashAmount = 0;
            master.BankAmount = 0;
        }
    }
    protected async void LedgerClicked()
    {
        if (master.LedgerId > 0)
        {
            var view = salesInvoiceRepository.CustomerSalesDue(master.LedgerId);
            master.PreviousDue = view.DueBalance;
        }
        else
        {
            master.PreviousDue = 0;
        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISnackbar Snackbar { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAccountLedger ledgerRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IUnit unitRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IArea areaRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISalesMan salesMan { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITax taxRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IProduct productRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IStockPosting stockPosting { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILocalStorageService LocalStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICategory category { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IInventorySetting settingRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DatabaseConnection _conn { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISalesInvoice salesInvoiceRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ICartService CartService { get; set; }
    }
}
#pragma warning restore 1591
