// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Dreamer.Pages.ExpensesPage
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Dreamer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.Setting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.Transaction;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.ViewModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Services.Interface;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Services.Repository;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Dreamer.PdfReport;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Blazored.Typeahead;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Services.CartService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\Pages\ExpensesPage\Expensessvoucheredit.razor"
using Radzen;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\Pages\ExpensesPage\Expensessvoucheredit.razor"
using Microsoft.EntityFrameworkCore.Storage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\Pages\ExpensesPage\Expensessvoucheredit.razor"
using Microsoft.Data.SqlClient;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\Pages\ExpensesPage\Expensessvoucheredit.razor"
using Dapper;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\Pages\ExpensesPage\Expensessvoucheredit.razor"
using System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\Pages\ExpensesPage\Expensessvoucheredit.razor"
using BlazorInputFile;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/expenses/expensesvoucheredit/{id}")]
    public partial class Expensessvoucheredit : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 220 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\Pages\ExpensesPage\Expensessvoucheredit.razor"
       
    [Parameter]
    public string id { get; set; }
    InventorySetting setting = new InventorySetting();
    ExpenseMaster mster = new ExpenseMaster();
    IncomeExpenditureView product = new IncomeExpenditureView();
    List<AccountLedger> listLedger = new List<AccountLedger>();
    List<AccountLedgerView> listSupCus = new List<AccountLedgerView>();
    List<AccountLedger> listCash = new List<AccountLedger>();
    List<AccountLedger> listBank = new List<AccountLedger>();
    //GetSessionInfo
    long decExpensiveVoucherTypeId = 29;
    string strSerialNo;
    string strPrefix;
    string strSuffix;
    long editedID = 0;
    bool showModal = false;
    private bool readOnly;
    protected async override void OnInitialized()
    {
        setting = settingRepository.EditInventorySetting(decExpensiveVoucherTypeId);
        strPrefix = setting.Prefix;
        strSuffix = setting.Suffix;
        LoadData();
        StateHasChanged();
    }
    protected void LoadData()
    {
        mster = expenVoucher.EditExpenseMaster(Convert.ToInt64(id));
        mster.Addresses = expenVoucher.ViewExpenditureDetails(Convert.ToInt64(id));
        listLedger = expenVoucher.EpensiveComboFill(1);
        listSupCus = ledger.ViewAllSupplier(1);
        listCash = ledger.GetCashFill();
        listBank = ledger.GetBankFill();
    }
    protected void Save()
    {
            decimal decGrandTotalCshbnk = 0;
            decGrandTotalCshbnk = Math.Round(mster.CashAmount + mster.BankAmount + mster.CreditAmount, 2);
            if (mster.Addresses == null)
            {
                Snackbar.Add("Invalid Entry.", Severity.Info);
            }
            else if (decGrandTotalCshbnk != mster.Amount)
            {
                Snackbar.Add("Invalid Entry.", Severity.Info);
            }
            else if (mster.VoucherNo == "")
            {
                Snackbar.Add("Type voucher no.", Severity.Info);
            }
            else if (mster.Date == null)
            {
                Snackbar.Add("Invalid Date.", Severity.Info);
            }
            else if (mster.CreditAmount > 0 && mster.LedgerId == 0)
            {
                Snackbar.Add("Choose Customer.", Severity.Info);
            }
            else if (mster.BankAmount > 0 && mster.BankId == 0)
            {
                Snackbar.Add("Choose Bank.", Severity.Info);
            }
            else if (mster.CashAmount > 0 && mster.CashId == 0)
            {
                Snackbar.Add("Choose Cash.", Severity.Info);
            }
            else if (mster.Amount == 0)
            {
                Snackbar.Add("Invalid Entry.", Severity.Info);
            }
            else
            {
                SqlConnection sqlcon = new SqlConnection(_conn.DbConn);
                sqlcon.Open();
                SqlTransaction sql = sqlcon.BeginTransaction();
                var para = new DynamicParameters();
                para.Add("@ExpensiveMasterId", mster.ExpensiveMasterId);
                para.Add("@SerialNo", mster.SerialNo);
                para.Add("@VoucherNo", mster.VoucherNo);
                para.Add("@InvoiceNo", mster.VoucherNo);
                para.Add("@SuffixPrefixId", 0);
                para.Add("@Date", mster.Date);
                para.Add("@NepaliDate", mster.NepaliDate);
                para.Add("@Amount", mster.Amount);
                para.Add("@LedgerId", mster.LedgerId);
                para.Add("@CreditAmount", mster.CreditAmount);
                para.Add("@BankId", mster.BankId);
                para.Add("@BankAmount", mster.BankAmount);
                para.Add("@CashId", mster.CashId);
                para.Add("@CashAmount", mster.CashAmount);
                para.Add("@VoucherTypeId", decExpensiveVoucherTypeId);
                para.Add("@Narration", mster.Narration);
                para.Add("@SuffixPrefixId", 0);
                para.Add("@UserId", mster.UserId);
                para.Add("@FinancialYearId", 1);
                para.Add("@CompanyId", 1);
                para.Add("@ModifyDate", DateTime.Now);
                para.Add("@ModifyBy", 1);
                sqlcon.Execute("ExpenseMasterUpdate", para, sql, 0, CommandType.StoredProcedure);


                //DeleteExpensesVoucher
                var paraScDelete = new DynamicParameters();
                paraScDelete.Add("@DetailsId", mster.ExpensiveMasterId);
                paraScDelete.Add("@VoucherTypeId", decExpensiveVoucherTypeId);
                var valueScDelete = sqlcon.Query<long>("DELETE FROM LedgerPosting where DetailsId=@DetailsId AND VoucherTypeId=@VoucherTypeId", paraScDelete, sql, true, 0, commandType: CommandType.Text);
                //DeleteExpenseDetails
                var paraScDeleteExpenseDetails = new DynamicParameters();
                paraScDeleteExpenseDetails.Add("@ExpensiveMasterId", mster.ExpensiveMasterId);
                var valueScDeleteExpense = sqlcon.Query<long>("DELETE FROM ExpenseDetails where ExpensiveMasterId=@ExpensiveMasterId", paraScDeleteExpenseDetails, sql, true, 0, commandType: CommandType.Text);
                //DeletePaymentVoucher
                foreach (var item in mster.Addresses)
                {
                    if (item.LedgerId > 0)
                    {
                        //if (item.ExpensiveMasterId == 0)
                        //{
                        var paraOpening = new DynamicParameters();
                        paraOpening.Add("@ExpensiveMasterId", mster.ExpensiveMasterId);
                        paraOpening.Add("@LedgerId", item.LedgerId);
                        paraOpening.Add("@Description", item.Description);
                        paraOpening.Add("@Amount", item.Amount);
                        paraOpening.Add("@TaxId", 1);
                        paraOpening.Add("@Rate", 0);
                        paraOpening.Add("@JourDId", dbType: DbType.Int64, direction: ParameterDirection.Output);
                        sqlcon.Execute("ExpenseDetailsAdd", paraOpening, sql, 0, CommandType.StoredProcedure);
                        long journaldetId = paraOpening.Get<long>("JourDId");

                        //ExpenseLedgerPosting
                        var paraLedger = new DynamicParameters();
                        paraLedger.Add("@Date", mster.Date);
                        paraLedger.Add("@NepaliDate", mster.NepaliDate);
                        paraLedger.Add("@LedgerId", item.LedgerId);
                        paraLedger.Add("@Debit", item.Amount);
                        paraLedger.Add("@Credit", 0);
                        paraLedger.Add("@VoucherNo", mster.VoucherNo);
                        paraLedger.Add("@DetailsId", mster.ExpensiveMasterId);
                        paraLedger.Add("@YearId", 1);
                        paraLedger.Add("@InvoiceNo", mster.VoucherNo);
                        paraLedger.Add("@VoucherTypeId", decExpensiveVoucherTypeId);
                        paraLedger.Add("@CompanyId", 1);
                        paraLedger.Add("@LongReference", mster.Narration);
                        paraLedger.Add("@ReferenceN", item.Description);
                        paraLedger.Add("@ChequeNo", string.Empty);
                        paraLedger.Add("@ChequeDate", string.Empty);
                        paraLedger.Add("@AddedDate", DateTime.Now);
                        var value = sqlcon.Query<long>("LedgerPostingInsert", paraLedger, sql, true, 0, commandType: CommandType.StoredProcedure);
                        //}
                        //else
                        //{
                        //    var paraOpening = new DynamicParameters();
                        //    paraOpening.Add("@ExpensiveDetailsId", item.ExpensiveDetailsId);
                        //    paraOpening.Add("@ExpensiveMasterId", mster.ExpensiveMasterId);
                        //    paraOpening.Add("@LedgerId", item.LedgerId);
                        //    paraOpening.Add("@Description", item.Description);
                        //    paraOpening.Add("@Amount", item.Amount);
                        //    paraOpening.Add("@TaxId", 1);
                        //    paraOpening.Add("@Rate", 0);
                        //    sqlcon.Execute("ExpenseDetailsUpdate", paraOpening, sql, 0, CommandType.StoredProcedure);
                        //}
                    }

                }

                //ExpenseLedger
                if (mster.LedgerId > 0)
                {
                    var paraScSupplier = new DynamicParameters();
                    paraScSupplier.Add("@Date", mster.Date);
                    paraScSupplier.Add("@NepaliDate", mster.NepaliDate);
                    paraScSupplier.Add("@LedgerId", mster.LedgerId);
                    paraScSupplier.Add("@Debit", 0);
                    paraScSupplier.Add("@Credit", mster.CreditAmount);
                    paraScSupplier.Add("@VoucherNo", mster.VoucherNo);
                    paraScSupplier.Add("@DetailsId", mster.ExpensiveMasterId);
                    paraScSupplier.Add("@YearId", 1);
                    paraScSupplier.Add("@InvoiceNo", mster.InvoiceNo);
                    paraScSupplier.Add("@VoucherTypeId", decExpensiveVoucherTypeId);
                    paraScSupplier.Add("@CompanyId", 1);
                    paraScSupplier.Add("@LongReference", mster.Narration);
                    paraScSupplier.Add("@ReferenceN", mster.Narration);
                    paraScSupplier.Add("@ChequeNo", string.Empty);
                    paraScSupplier.Add("@ChequeDate", string.Empty);
                    paraScSupplier.Add("@AddedDate", DateTime.Now);
                    var valueScSupplier = sqlcon.Query<long>("LedgerPostingInsert", paraScSupplier, sql, true, 0, commandType: CommandType.StoredProcedure);
                }
                //Cash
                if (mster.CashAmount > 0)
                {
                    var paraCash = new DynamicParameters();
                    paraCash.Add("@Date", mster.Date);
                    paraCash.Add("@NepaliDate", mster.NepaliDate);
                    paraCash.Add("@LedgerId", mster.CashId);
                    paraCash.Add("@Debit", 0);
                    paraCash.Add("@Credit", mster.CashAmount);
                    paraCash.Add("@VoucherNo", mster.VoucherNo);
                    paraCash.Add("@DetailsId", mster.ExpensiveMasterId);
                    paraCash.Add("@YearId", 1);
                    paraCash.Add("@InvoiceNo", mster.InvoiceNo);
                    paraCash.Add("@VoucherTypeId", decExpensiveVoucherTypeId);
                    paraCash.Add("@CompanyId", 1);
                    paraCash.Add("@LongReference", mster.Narration);
                    paraCash.Add("@ReferenceN", mster.Narration);
                    paraCash.Add("@ChequeNo", string.Empty);
                    paraCash.Add("@ChequeDate", string.Empty);
                    paraCash.Add("@AddedDate", DateTime.Now);
                    var valueCash = sqlcon.Query<long>("LedgerPostingInsert", paraCash, sql, true, 0, commandType: CommandType.StoredProcedure);
                }
                //Bank
                if (mster.BankAmount > 0)
                {
                    var paraBank = new DynamicParameters();
                    paraBank.Add("@Date", mster.Date);
                    paraBank.Add("@NepaliDate", mster.NepaliDate);
                    paraBank.Add("@LedgerId", mster.BankId);
                    paraBank.Add("@Debit", 0);
                    paraBank.Add("@Credit", mster.BankAmount);
                    paraBank.Add("@VoucherNo", mster.VoucherNo);
                    paraBank.Add("@DetailsId", mster.ExpensiveMasterId);
                    paraBank.Add("@YearId", 1);
                    paraBank.Add("@InvoiceNo", mster.InvoiceNo);
                    paraBank.Add("@VoucherTypeId", decExpensiveVoucherTypeId);
                    paraBank.Add("@CompanyId", 1);
                    paraBank.Add("@LongReference", mster.Narration);
                    paraBank.Add("@ReferenceN", mster.Narration);
                    paraBank.Add("@ChequeNo", string.Empty);
                    paraBank.Add("@ChequeDate", string.Empty);
                    paraBank.Add("@AddedDate", DateTime.Now);
                    var valueBank = sqlcon.Query<long>("LedgerPostingInsert", paraBank, sql, true, 0, commandType: CommandType.StoredProcedure);
                }
                sql.Commit();
                Snackbar.Add("Updated Successfully.", Severity.Success);
                navManager.NavigateTo("/expenses/expensesvoucherlist");
            }
    }
    void Calculate()
    {
        decimal decAmount = 0;
        

#line default
#line hidden
#nullable disable
#nullable restore
#line 459 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\Pages\ExpensesPage\Expensessvoucheredit.razor"
         for (var i = 0; i < mster.Addresses.Count; i++)
        {
            var address = mster.Addresses[i];
            decAmount = decAmount + address.Amount;
        }

#line default
#line hidden
#nullable disable
#nullable restore
#line 463 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\Pages\ExpensesPage\Expensessvoucheredit.razor"
         
        mster.Amount = Math.Round(decAmount, 1);
    }
    void Remove(int index)
    {
        if (index > 0)
        {
            mster.Addresses.RemoveAt(index);
            decimal decAmount = 0;
            

#line default
#line hidden
#nullable disable
#nullable restore
#line 472 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\Pages\ExpensesPage\Expensessvoucheredit.razor"
             for (var i = 0; i < mster.Addresses.Count; i++)
            {
                var address = mster.Addresses[i];
                decAmount = decAmount + address.Amount;
            }

#line default
#line hidden
#nullable disable
#nullable restore
#line 476 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\Pages\ExpensesPage\Expensessvoucheredit.razor"
             
            mster.Amount = Math.Round(decAmount, 1);
        }
        else
        {
            Snackbar.Add("Default value cannot be delete.", Severity.Info);
        }
    }
    void AddJournal()
    {
        decimal decAmount = 0;
        

#line default
#line hidden
#nullable disable
#nullable restore
#line 487 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\Pages\ExpensesPage\Expensessvoucheredit.razor"
         for (var i = 0; i < mster.Addresses.Count; i++)
        {

            if (mster.Addresses[i].LedgerId == 0)
            {
                Snackbar.Add("Choose Expense.", Severity.Info);
            }
            else
            {
                mster.Addresses.Add(new ExpenseDetails());
                var address = mster.Addresses[i];
                decAmount = decAmount + address.Amount;
            }
        }

#line default
#line hidden
#nullable disable
#nullable restore
#line 500 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\Pages\ExpensesPage\Expensessvoucheredit.razor"
         
        mster.Amount = Math.Round(decAmount, 1);
    }
    void CalculateTotal()
    {
        decimal decGrandTotalCshbnk = 0;
        decimal decNetAmount = 0;
        decimal decGrandTotal = 0;
        decNetAmount = mster.Amount;
        decGrandTotal = Math.Round(decNetAmount, 1);
        decGrandTotalCshbnk = Math.Round(mster.CashAmount + mster.BankAmount + mster.CreditAmount, 1);
        if (mster.Amount >= decGrandTotalCshbnk)
        {
            //mster.CreditAmount = 0;
            //mster.CashAmount = 0;
            //mster.BankAmount = 0;
        }
        else
        {
            mster.CreditAmount = 0;
            mster.CashAmount = 0;
            mster.BankAmount = 0;
        }
    }
    void Cancel()
    {
        navManager.NavigateTo("/expenses/expensesvoucherlist");
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISnackbar Snackbar { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ExpensesVoucherRepository expenVoucher { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IInventorySetting settingRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAccountLedger ledger { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DatabaseConnection _conn { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILocalStorageService sessionStorage { get; set; }
    }
}
#pragma warning restore 1591
