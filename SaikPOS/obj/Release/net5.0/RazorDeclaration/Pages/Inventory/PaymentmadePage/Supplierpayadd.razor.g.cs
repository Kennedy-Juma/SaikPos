// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Dreamer.Pages.Inventory.PaymentmadePage
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using System.IO;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Dreamer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.Setting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.Transaction;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data.ViewModel;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Services.Interface;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Services.Repository;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Dreamer.PdfReport;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using MudBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Blazored.LocalStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Blazored.Typeahead;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Dreamer.Services.CartService;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\_Imports.razor"
using Microsoft.Extensions.Localization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\Pages\Inventory\PaymentmadePage\Supplierpayadd.razor"
using Microsoft.Data.SqlClient;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\Pages\Inventory\PaymentmadePage\Supplierpayadd.razor"
using Dapper;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\Pages\Inventory\PaymentmadePage\Supplierpayadd.razor"
using System.Data;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/purchase/paymentsupplieradd")]
    public partial class Supplierpayadd : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 168 "D:\CodecanonProject\Dotnet5\BusinessPro\Dreamer\Dreamer\Pages\Inventory\PaymentmadePage\Supplierpayadd.razor"
       
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    InventorySetting setting = new InventorySetting();
    PaymentMaster master = new PaymentMaster();
    List<AccountLedgerView> listSupplier = new List<AccountLedgerView>();
    List<AccountLedger> listCash = new List<AccountLedger>();
    List<AccountLedger> listBank = new List<AccountLedger>();
    List<PurchaseMasterView> articleModel = new List<PurchaseMasterView>();
    string Email;
    long decPaymenVoucherId = 4;
    string strSerialNo;
    string strPrefix;
    string strSuffix;
    decimal decTotal = 0;
    decimal PreviousDue = 0;
    bool chkPay = false;
    bool chkFullPayment = false;
    string myMarkup;

    protected async override void OnInitialized()
    {
        setting = settingRepository.EditInventorySetting(decPaymenVoucherId);
        strPrefix = setting.Prefix;
        strSuffix = setting.Suffix;
        LoadData();
        StateHasChanged();
    }

    protected void LoadData()
    {
        chkPay = false;
        chkFullPayment = false;
        if (setting.VoucherNoAutomatic == true)
        {
            strSerialNo = _payment.GetPaymentVoucherNo(1, 1, decPaymenVoucherId);
            master.VoucherNo = strPrefix + strSerialNo + strSuffix;
        }
        else
        {
            master.VoucherNo = string.Empty;
            strSerialNo = "0";
        }
        master.Date = DateTime.Now;
        master.NepaliDate = string.Empty;
        master.CreditAmount = 0;
        master.BankAmount = 0;
        master.CashAmount = 0;
        PreviousDue = 0;
        decTotal = 0;
        master.Narration = string.Empty;
        listSupplier = accountLedger.ViewAllSupplier(1);
        listCash = accountLedger.GetCashFill();
        listBank = accountLedger.GetBankFill();
        master.LedgerId = 0;
        master.CashId = 1;
        master.BankId = 13;
    }


    protected async void Save()
    {
            if (master.LedgerId == 0)
            {
                Snackbar.Add("Choose Supplier.", Severity.Info);
            }
            else if (master.VoucherNo == string.Empty)
            {
                Snackbar.Add("Type voucher.", Severity.Info);
            }
            else
            {
                var isCheck = _payment.CheckPaymentSupplier(master.VoucherNo, 1, 1, decPaymenVoucherId);
                if (isCheck == true)
                {
                    Snackbar.Add("Voucher no already exists.", Severity.Info);
                }
                else
                {
                    var authState = await authenticationStateTask;
        var user = authState.User;
                    //decimal TotalCashBank = master.CashAmount + master.BankAmount;
                    //if (TotalCashBank == master.Amountused)
                    //{
                    SqlConnection sqlcon = new SqlConnection(_conn.DbConn);
                    sqlcon.Open();
                    SqlTransaction sql = sqlcon.BeginTransaction();
                    decimal decCredit = master.CashAmount + master.BankAmount;

                    var paraLedger = new DynamicParameters();
                    paraLedger.Add("@SerialNo", strSerialNo);
                    paraLedger.Add("@Date", master.Date);
                    paraLedger.Add("@NepaliDate", master.NepaliDate);
                    paraLedger.Add("@LedgerId", master.LedgerId);
                    paraLedger.Add("@VoucherNo", master.VoucherNo);
                    paraLedger.Add("@SuffixPrefixId", 0);
                    paraLedger.Add("@financialYearId", 1);
                    paraLedger.Add("@InvoiceNo", master.VoucherNo);
                    paraLedger.Add("@VoucherTypeId", decPaymenVoucherId);
                    paraLedger.Add("@CompanyId", 1);
                    paraLedger.Add("@DetailsId", 0);
                    paraLedger.Add("@CashAmount", master.CashAmount);
                    paraLedger.Add("@BankAmount", master.BankAmount);
                    paraLedger.Add("@CreditAmount", master.CreditAmount);
                    paraLedger.Add("@TotalAmount", decCredit);
                    paraLedger.Add("@Narration", master.Narration);
                    paraLedger.Add("@UserId", user.Identity.Name);
                    paraLedger.Add("@CashId", master.CashId);
                    paraLedger.Add("@BankId", master.BankId);
                    paraLedger.Add("@Optional", "Payment");
                    paraLedger.Add("@AddedDate", DateTime.Now);
                    paraLedger.Add("@AddedBy", 1);
                    paraLedger.Add("@MemOUT", dbType: DbType.Int64, direction: ParameterDirection.Output);
                    sqlcon.Execute("PaymentMasterAdd", paraLedger, sql, 0, CommandType.StoredProcedure);
                    long MemID = paraLedger.Get<long>("MemOUT");
                    //UpdatePurchaseMaster
                    foreach (var item in articleModel)
                    {
                        PurchaseMaster master = new PurchaseMaster();
                        master = purchaseInvoiceRepository.EditPurchaseMaster(Convert.ToInt64(item.PurchaseMasterId));
                        decimal decTotalDuess = item.TotalDue;
                        decimal decPaymentAmount = item.PaymentAmount;
                        var para = new DynamicParameters();
                        para.Add("@PurchaseMasterId", item.PurchaseMasterId);
                        para.Add("@BalanceDue", master.CreditAmount - item.PaymentAmount);
                        para.Add("@CashAmount", master.CashAmount + item.PaymentAmount);
                        para.Add("@CreditAmount", master.CreditAmount - item.PaymentAmount);
                        if (decTotalDuess == decPaymentAmount)
                        {
                            para.Add("@Status", "Paid");
                        }
                        else if (decTotalDuess > decPaymentAmount)
                        {
                            para.Add("@Status", "PartialPaid");
                        }
                        else
                        {
                            para.Add("@Status", "Draft");
                        }
                        sqlcon.Execute("UPDATE PurchaseMaster SET BalanceDue=@BalanceDue,Status=@Status,CashAmount=@CashAmount,CreditAmount=@CreditAmount where PurchaseMasterId=@PurchaseMasterId", para, sql, 0, CommandType.Text);
                    }

                    //LedgerPosting
                    //Supplier
                    decimal decSupplierAmount = master.BankAmount + master.CashAmount;
                    if (decSupplierAmount > 0)
                    {
                        var paraSc = new DynamicParameters();
                        paraSc.Add("@Date", master.Date);
                        paraSc.Add("@NepaliDate", master.NepaliDate);
                        paraSc.Add("@LedgerId", master.LedgerId);
                        paraSc.Add("@Debit", decSupplierAmount);
                        paraSc.Add("@Credit", 0);
                        paraSc.Add("@VoucherNo", master.VoucherNo);
                        paraSc.Add("@DetailsId", MemID);
                        paraSc.Add("@YearId", 1);
                        paraSc.Add("@InvoiceNo", string.Empty);
                        paraSc.Add("@VoucherTypeId", decPaymenVoucherId);
                        paraSc.Add("@CompanyId", 1);
                        paraSc.Add("@LongReference", master.Narration);
                        paraSc.Add("@ReferenceN", master.Narration);
                        paraSc.Add("@ChequeNo", string.Empty);
                        paraSc.Add("@ChequeDate", string.Empty);
                        paraSc.Add("@AddedDate", DateTime.Now);
                        var valueSc = sqlcon.Query<long>("LedgerPostingInsert", paraSc, sql, true, 0, commandType: CommandType.StoredProcedure);
                    }

                    //Cash
                    if (master.CashAmount > 0)
                    {
                        var paraCash = new DynamicParameters();
                        paraCash.Add("@Date", master.Date);
                        paraCash.Add("@NepaliDate", master.NepaliDate);
                        paraCash.Add("@LedgerId", master.CashId);
                        paraCash.Add("@Debit", 0);
                        paraCash.Add("@Credit", master.CashAmount);
                        paraCash.Add("@VoucherNo", master.VoucherNo);
                        paraCash.Add("@DetailsId", MemID);
                        paraCash.Add("@YearId", 1);
                        paraCash.Add("@InvoiceNo", string.Empty);
                        paraCash.Add("@VoucherTypeId", decPaymenVoucherId);
                        paraCash.Add("@CompanyId", 1);
                        paraCash.Add("@LongReference", master.Narration);
                        paraCash.Add("@ReferenceN", master.Narration);
                        paraCash.Add("@ChequeNo", string.Empty);
                        paraCash.Add("@ChequeDate", string.Empty);
                        paraCash.Add("@AddedDate", DateTime.Now);
                        var valueCash = sqlcon.Query<long>("LedgerPostingInsert", paraCash, sql, true, 0, commandType: CommandType.StoredProcedure);
                    }
                    //Bank
                    if (master.BankAmount > 0)
                    {
                        var paraBank = new DynamicParameters();
                        paraBank.Add("@Date", master.Date);
                        paraBank.Add("@NepaliDate", master.NepaliDate);
                        paraBank.Add("@LedgerId", master.BankId);
                        paraBank.Add("@Debit", 0);
                        paraBank.Add("@Credit", master.BankAmount);
                        paraBank.Add("@VoucherNo", master.VoucherNo);
                        paraBank.Add("@DetailsId", MemID);
                        paraBank.Add("@YearId", 1);
                        paraBank.Add("@InvoiceNo", string.Empty);
                        paraBank.Add("@VoucherTypeId", decPaymenVoucherId);
                        paraBank.Add("@CompanyId", 1);
                        paraBank.Add("@LongReference", master.Narration);
                        paraBank.Add("@ReferenceN", master.Narration);
                        paraBank.Add("@ChequeNo", string.Empty);
                        paraBank.Add("@ChequeDate", string.Empty);
                        paraBank.Add("@AddedDate", DateTime.Now);
                        var valueBank = sqlcon.Query<long>("LedgerPostingInsert", paraBank, sql, true, 0, commandType: CommandType.StoredProcedure);
                    }
                    sql.Commit();
                    Snackbar.Add("Successfully Saved.", Severity.Success);
                    navManager.NavigateTo($"/purchase/supplierpayshow/{MemID}");
                }
            }
    }
    protected void LedgerClicked()
    {
        decimal decTotalDue = 0;

        if (master.LedgerId > 0)
        {
            var view = purchaseInvoiceRepository.GetPreviousDuesBalancepurchase(master.LedgerId);
            articleModel = _payment.GetSupplierPaymentList(master.LedgerId);
            foreach (var item in articleModel)
            {
                decTotalDue = decTotalDue + item.TotalDue;
                decTotal = decTotal + item.GrandTotal;
            }
            PreviousDue = view.DueBalance; ;
            //master.PreviousDue = view.DueBalance;
        }
        else
        {
            articleModel.Clear();
            PreviousDue = 0;
            PreviousDue = 0;
            master.CashAmount = 0;
            master.BankAmount = 0;
            master.CreditAmount = 0;
        }
        StateHasChanged();
    }
    protected void payinfull(decimal decTotalDue)
    {
        decimal decDueAmount = 0;
        decimal decPay = 0;
        decimal decPayTotal = 0;

        foreach (var item in articleModel)
        {
            if (chkFullPayment == true)
            {
                item.PaymentAmount = decTotalDue;
                decDueAmount = decDueAmount + item.TotalDue;
                decPayTotal = decPayTotal + item.PaymentAmount;
                decPay = item.TotalDue;
                //item.PaymentAmount = decPay;
            }
            else
            {
                item.PaymentAmount = 0;
                decDueAmount = 0;
                decPayTotal = 0;
                decPay = 0;
            }
        }
        master.CashAmount = decPayTotal;
        StateHasChanged();
    }
    protected void checkPay()
    {
        decimal decDueAmount = 0;
        decimal decPay = 0;
        decimal decPayTotal = 0;

        foreach (var item in articleModel)
        {
            if (chkPay == false)
            {
                decDueAmount = decDueAmount + item.TotalDue;
                decPayTotal = decPayTotal + item.PaymentAmount;
                decPay = item.TotalDue;
                item.PaymentAmount = decPay;
            }
            else
            {
                decDueAmount = 0;
                decPayTotal = 0;
                item.PaymentAmount = 0;
            }
        }
        master.CashAmount = decPayTotal;
        Calculate();
        StateHasChanged();
    }
    void Calculate()
    {
        decimal totalAmount = PreviousDue;
        decimal CashAmount = master.CashAmount;
        decimal BankAmount = master.BankAmount;
        decimal creditAmount = master.CreditAmount;
        decimal decGrandTotal = CashAmount + BankAmount;
        if (totalAmount >= decGrandTotal)
        {
            decimal decTotl = totalAmount - decGrandTotal;
            master.CreditAmount = decTotl;
        }
        else
        {
            master.CreditAmount = 0;
            master.CashAmount = 0;
            master.BankAmount = 0;
        }
    }
    async Task PayCalculate()
    {
        decimal decDueAmount = 0;
        decimal decPay = 0;
        decimal decPayTotal = 0;
        foreach (var item in articleModel)
        {
            decDueAmount = decDueAmount + item.TotalDue;
            decPayTotal = decPayTotal + item.PaymentAmount;
            //decPay = item.TotalDue;
            //item.PaymentAmount = decPay;
        }
        master.CashAmount = decPayTotal;
        Calculate();
    }
    void Cancel()
    {
        navManager.NavigateTo("inventory/supplierpaylist");
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISnackbar Snackbar { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DatabaseConnection _conn { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IPaymentSupplier _payment { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAccountLedger accountLedger { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IInventorySetting settingRepository { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IPurchaseInvoice purchaseInvoiceRepository { get; set; }
    }
}
#pragma warning restore 1591
